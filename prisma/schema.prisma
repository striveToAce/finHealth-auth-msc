// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(uuid())
  firstName    String
  lastName     String
  email        String?        @unique
  phone        String?        @unique
  credits      Decimal        @default(0.0)
  isDeleted    Boolean        @default(false)
  isSuspended  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  username     String         @unique
  dob          DateTime
  password     String // Don't forget to store hashed password
  RefreshToken RefreshToken[]
  transactions Transaction[]
  loans UserLoan[]
}

model RefreshToken {
  id        String   @id @default(uuid()) // UUID auto-generated
  token     String // The actual refresh token
  userId    String // Foreign key to the User model
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User model
  createdAt DateTime @default(now()) // Timestamp for when the token was created
  expiresAt DateTime // Timestamp for when the token expires
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserLoanStatus {
  CLOSED
  ACTIVE
}

model Transaction {
  id          String             @id @default(uuid())
  title       String             
  description String             
  amount      Float              @default(0)
  isCredit    Boolean
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  label       String             
  status      TransactionStatus  @default(PENDING)
  reason      String?            
  userId      String
  user        User               @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@index([userId]) // Optional: For optimized queries by userId
}

model UserLoan {
  id          String             @id @default(uuid())
  title       String             
  description String             
  amount      Float              @default(0)
  rate        Float              @default(0)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  label       String
  emiQty      Int                @default(0)             
  status      UserLoanStatus  @default(ACTIVE)
  lender      String
  reason      String?            
  userId      String
  user        User               @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@index([userId]) // Optional: For optimized queries by userId
}
